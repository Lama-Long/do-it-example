{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { CREATE, FETCH, FETCH_LIST, RESET, UPDATE } from './actionTypes';\nimport { handle } from 'redux-pack';\nexport default (function () {\n  for (var _len = arguments.length, reducerNames = new Array(_len), _key = 0; _key < _len; _key++) {\n    reducerNames[_key] = arguments[_key];\n  }\n\n  return reducerNames.reduce(function (apiReducers, name) {\n    var _loadingState, _errorState;\n\n    var initState = {\n      ids: [],\n      entities: {},\n      loadingState: (_loadingState = {}, _defineProperty(_loadingState, \"\".concat(CREATE, \"/\").concat(name), false), _defineProperty(_loadingState, \"\".concat(UPDATE, \"/\").concat(name), false), _defineProperty(_loadingState, \"\".concat(FETCH, \"/\").concat(name), false), _defineProperty(_loadingState, \"\".concat(FETCH_LIST, \"/\").concat(name), false), _loadingState),\n      errorState: (_errorState = {}, _defineProperty(_errorState, \"\".concat(CREATE, \"/\").concat(name), false), _defineProperty(_errorState, \"\".concat(UPDATE, \"/\").concat(name), false), _defineProperty(_errorState, \"\".concat(FETCH, \"/\").concat(name), false), _defineProperty(_errorState, \"\".concat(FETCH_LIST, \"/\").concat(name), false), _errorState),\n      pagination: {}\n    };\n\n    apiReducers[name] = function () {\n      var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initState;\n      var action = arguments.length > 1 ? arguments[1] : undefined;\n      var type = action.type,\n          payload = action.payload,\n          meta = action.meta;\n\n      var _ref = meta || {},\n          resourceName = _ref.resourceName,\n          key = _ref.key;\n\n      if (resourceName !== name) {\n        return state;\n      }\n\n      switch (type) {\n        case UPDATE:\n        case FETCH:\n        case CREATE:\n        case FETCH_LIST:\n          return handle(state, action, {\n            start: function start(prevState) {\n              return _objectSpread({}, prevState, {\n                loadingState: _objectSpread({}, prevState.loadingState, _defineProperty({}, \"\".concat(type, \"/\").concat(name), true)),\n                errorState: _objectSpread({}, prevState.errorState, _defineProperty({}, \"\".concat(type, \"/\").concat(name), true))\n              });\n            },\n            success: function success(prevState) {\n              var data = payload.data;\n\n              if (type === FETCH_LIST) {\n                var _ref2 = meta || {},\n                    pageNumber = _ref2.pageNumber,\n                    pageSize = _ref2.pageSize;\n\n                var ids = data.map(function (entity) {\n                  return entity[key];\n                });\n                var entities = data.reduce(function (finalEntities, entity) {\n                  return _objectSpread({}, finalEntities, _defineProperty({}, entity[key], entity));\n                }, {});\n                return _objectSpread({}, prevState, {\n                  ids: ids,\n                  entities: _objectSpread({}, prevState.entities, {}, entities),\n                  loadingState: _objectSpread({}, prevState.loadingState, _defineProperty({}, \"\".concat(type, \"/\").concat(name), false)),\n                  errorState: _objectSpread({}, prevState.errorState, _defineProperty({}, \"\".concat(type, \"/\").concat(name), false)),\n                  pagination: {\n                    number: pageNumber,\n                    size: pageSize\n                  }\n                });\n              } else {\n                var id = data[key];\n                return _objectSpread({}, prevState, {\n                  id: id,\n                  entities: _objectSpread({}, prevState.entities, _defineProperty({}, id, data)),\n                  loadingState: _objectSpread({}, prevState.loadingState, _defineProperty({}, \"\".concat(type, \"/\").concat(name), false)),\n                  errorState: _objectSpread({}, prevState.errorState, _defineProperty({}, \"\".concat(type, \"/\").concat(name), false))\n                });\n              }\n            },\n            failure: function failure(prevState) {\n              var _ref3 = payload.response ? payload.response.data : {},\n                  errorMessage = _ref3.errorMessage;\n\n              return _objectSpread({}, prevState, {\n                loadingState: _objectSpread({}, prevState.loadingState, _defineProperty({}, \"\".concat(type, \"/\").concat(name), false)),\n                errorState: _objectSpread({}, prevState.errorState, _defineProperty({}, \"\".concat(type, \"/\").concat(name), errorMessage || true))\n              });\n            }\n          });\n\n        case RESET:\n          return initState;\n\n        default:\n          return state;\n      }\n    };\n\n    return apiReducers;\n  }, {});\n});","map":null,"metadata":{},"sourceType":"module"}
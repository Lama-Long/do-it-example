{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { PureComponent } from 'react';\nimport Option from './Option';\nimport { css, withStyles, withStylesPropTypes } from './withStyles';\nexport { Option };\n\nvar Select = /*#__PURE__*/function (_PureComponent) {\n  _inherits(Select, _PureComponent);\n\n  var _super = _createSuper(Select);\n\n  function Select() {\n    var _this;\n\n    _classCallCheck(this, Select);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      focused: false\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleFocus\", function () {\n      _this.setState({\n        focused: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleBlur\", function () {\n      _this.setState({\n        focused: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleChange\", function (e) {\n      var _this$props = _this.props,\n          name = _this$props.name,\n          onChange = _this$props.onChange;\n\n      if (onChange) {\n        onChange(name, e.target.value);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setRef\", function (ref) {\n      _this.ref = ref;\n    });\n\n    return _this;\n  }\n\n  _createClass(Select, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.autoFocus) {\n        this.ref.focus();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          children = _this$props2.children,\n          disabled = _this$props2.disabled,\n          errorMessage = _this$props2.errorMessage,\n          label = _this$props2.label,\n          value = _this$props2.value,\n          name = _this$props2.name,\n          styles = _this$props2.styles,\n          large = _this$props2.large,\n          xlarge = _this$props2.xlarge,\n          small = _this$props2.small,\n          xsmall = _this$props2.xsmall;\n      var focused = this.state.focused;\n      return __jsx(\"fieldset\", css(styles.wrapper), __jsx(\"label\", _extends({\n        htmlFor: \"input_\".concat(name)\n      }, css(styles.label, errorMessage && styles.errorLabel)), errorMessage || label), __jsx(\"div\", css(styles.placeholder, xsmall && styles.xsmallPadding, small && styles.smallPadding, large && styles.largePadding, xlarge && styles.xlargePadding, focused && styles.focus, errorMessage && styles.error), __jsx(\"select\", _extends({}, css(styles.select, xsmall && styles.xsmall, small && styles.small, large && styles.large, xlarge && styles.xlarge), {\n        disabled: disabled,\n        id: \"input_\".concat(name),\n        ref: this.setRef,\n        onChange: this.handleChange,\n        onFocus: this.handleFocus,\n        onBlur: this.handleBlur,\n        value: value\n      }), React.Children.map(children, function (child) {\n        return React.cloneElement(child, {\n          disabled: disabled\n        });\n      }))));\n    }\n  }]);\n\n  return Select;\n}(PureComponent);\n\nSelect.defaultProps = {\n  onChange: function onChange() {},\n  autoFocus: false\n};\nexport default withStyles(function (_ref) {\n  var unit = _ref.unit,\n      color = _ref.color,\n      size = _ref.size,\n      lineHeight = _ref.lineHeight;\n  return {\n    wrapper: {\n      border: 0,\n      padding: 0,\n      position: 'relative'\n    },\n    label: {\n      display: 'block',\n      fontSize: size.xs,\n      top: 2,\n      left: unit * 2,\n      cursor: 'pointer'\n    },\n    placeholder: {\n      marginTop: 2,\n      border: 1,\n      borderColor: color.primary,\n      borderStyle: 'solid',\n      borderRadius: 4,\n      padding: unit * 1.5\n    },\n    focus: {\n      boxShadow: '0 0 0px 2px rgba(0, 0, 0, 0.3)'\n    },\n    xlargePadding: {\n      padding: unit * 2\n    },\n    largePadding: {\n      padding: unit * 2\n    },\n    smallPadding: {\n      padding: unit - 1\n    },\n    xsmallPadding: {\n      padding: unit - 2\n    },\n    select: {\n      fontSize: size.md,\n      lineHeight: lineHeight.md,\n      backgroundColor: color.white,\n      border: 0,\n      outline: 0,\n      width: '100%'\n    },\n    xlarge: {\n      fontSize: size.xg\n    },\n    large: {\n      fontSize: size.lg\n    },\n    small: {\n      fontSize: size.sm\n    },\n    errorLabel: {\n      color: color.error\n    },\n    error: {\n      borderColor: color.error\n    }\n  };\n})(Select);","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { hideMessage, SHOW_NOTIFICATION, showMessage } from '../actions/notificationActions';\nimport { debounce } from '../../02/debounce';\nimport { KEY, LIFECYCLE } from 'redux-pack';\nimport { FETCH_TRANSACTION_LIST } from '../actions/transactionPackActions';\nconst debounceRunner = debounce(action => action(), 2000);\nexport default (store => nextRunner => action => {\n  const {\n    type,\n    meta\n  } = action;\n\n  if (meta && meta.notification) {\n    const {\n      success,\n      error\n    } = meta.notification;\n\n    if (success && meta[KEY.LIFECYCLE] === LIFECYCLE.SUCCESS) {\n      store.dispatch(showMessage(success));\n    } else if (error && meta[KEY.LIFECYCLE] === LIFECYCLE.FAILURE) {\n      store.dispatch(showMessage(error, true));\n    } else if (type === FETCH_TRANSACTION_LIST && meta[KEY.LIFECYCLE] === LIFECYCLE.SUCCESS) {\n      const message = '거래 목록을 최신 정보로 업데이트 했습니다.';\n      store.dispatch(showMessage(message));\n    }\n  } else if (type === SHOW_NOTIFICATION) {\n    const hide = () => store.dispatch(hideMessage());\n\n    debounceRunner(hide);\n  }\n\n  return nextRunner(action);\n});","map":{"version":3,"sources":["/Volumes/Workstation/dev_wooseok/react/do-it-example/src/08/middlewares/notificationEffects.js"],"names":["hideMessage","SHOW_NOTIFICATION","showMessage","debounce","KEY","LIFECYCLE","FETCH_TRANSACTION_LIST","debounceRunner","action","store","nextRunner","type","meta","notification","success","error","SUCCESS","dispatch","FAILURE","message","hide"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,iBAAtB,EAAyCC,WAAzC,QAA4D,gCAA5D;AACA,SAASC,QAAT,QAAyB,mBAAzB;AACA,SAASC,GAAT,EAAcC,SAAd,QAA+B,YAA/B;AACA,SAASC,sBAAT,QAAuC,mCAAvC;AAEA,MAAMC,cAAc,GAAGJ,QAAQ,CAAEK,MAAD,IAAYA,MAAM,EAAnB,EAAuB,IAAvB,CAA/B;AAEA,gBAAgBC,KAAD,IAAYC,UAAD,IAAiBF,MAAD,IAAY;AACpD,QAAM;AAAEG,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAiBJ,MAAvB;;AACA,MAAII,IAAI,IAAIA,IAAI,CAACC,YAAjB,EAA+B;AAC7B,UAAM;AAAEC,MAAAA,OAAF;AAAWC,MAAAA;AAAX,QAAqBH,IAAI,CAACC,YAAhC;;AACA,QAAIC,OAAO,IAAIF,IAAI,CAACR,GAAG,CAACC,SAAL,CAAJ,KAAwBA,SAAS,CAACW,OAAjD,EAA0D;AACxDP,MAAAA,KAAK,CAACQ,QAAN,CAAef,WAAW,CAACY,OAAD,CAA1B;AACD,KAFD,MAEO,IAAIC,KAAK,IAAIH,IAAI,CAACR,GAAG,CAACC,SAAL,CAAJ,KAAwBA,SAAS,CAACa,OAA/C,EAAwD;AAC7DT,MAAAA,KAAK,CAACQ,QAAN,CAAef,WAAW,CAACa,KAAD,EAAQ,IAAR,CAA1B;AACD,KAFM,MAEA,IAAIJ,IAAI,KAAKL,sBAAT,IAAmCM,IAAI,CAACR,GAAG,CAACC,SAAL,CAAJ,KAAwBA,SAAS,CAACW,OAAzE,EAAkF;AACvF,YAAMG,OAAO,GAAG,0BAAhB;AACAV,MAAAA,KAAK,CAACQ,QAAN,CAAef,WAAW,CAACiB,OAAD,CAA1B;AACD;AACF,GAVD,MAUO,IAAIR,IAAI,KAAKV,iBAAb,EAAgC;AACrC,UAAMmB,IAAI,GAAG,MAAMX,KAAK,CAACQ,QAAN,CAAejB,WAAW,EAA1B,CAAnB;;AACAO,IAAAA,cAAc,CAACa,IAAD,CAAd;AACD;;AAED,SAAOV,UAAU,CAACF,MAAD,CAAjB;AACD,CAlBD","sourcesContent":["import { hideMessage, SHOW_NOTIFICATION, showMessage } from '../actions/notificationActions';\nimport { debounce } from '../../02/debounce';\nimport { KEY, LIFECYCLE } from 'redux-pack';\nimport { FETCH_TRANSACTION_LIST } from '../actions/transactionPackActions';\n\nconst debounceRunner = debounce((action) => action(), 2000);\n\nexport default (store) => (nextRunner) => (action) => {\n  const { type, meta } = action;\n  if (meta && meta.notification) {\n    const { success, error } = meta.notification;\n    if (success && meta[KEY.LIFECYCLE] === LIFECYCLE.SUCCESS) {\n      store.dispatch(showMessage(success));\n    } else if (error && meta[KEY.LIFECYCLE] === LIFECYCLE.FAILURE) {\n      store.dispatch(showMessage(error, true));\n    } else if (type === FETCH_TRANSACTION_LIST && meta[KEY.LIFECYCLE] === LIFECYCLE.SUCCESS) {\n      const message = '거래 목록을 최신 정보로 업데이트 했습니다.';\n      store.dispatch(showMessage(message));\n    }\n  } else if (type === SHOW_NOTIFICATION) {\n    const hide = () => store.dispatch(hideMessage());\n    debounceRunner(hide);\n  }\n\n  return nextRunner(action);\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport createActions from '../../11/api-redux-pack/createActions';\nexport const CREATE_TRANSACTION = 'transaction/CREATE_TRANSACTION';\nexport const FETCH_TRANSACTION_LIST = 'transaction/FETCH_TRANSACTION_LIST';\nconst {\n  collection,\n  create,\n  reset\n} = createActions('transactions');\nconst PAGE_SIZE = 10;\nexport const resetTransactionList = reset;\nexport function requestTransactionList(params, _page = 1) {\n  const meta = {\n    pageNumber: _page,\n    pageSize: PAGE_SIZE,\n    notification: {\n      success: '거래 목록을 최신 정보로 업데이트했습니다.',\n      error: '거래 목록을 갱신하는 중에 문제가 발생했습니다.'\n    }\n  };\n  return collection(_objectSpread({}, params, {\n    _page,\n    _limit: PAGE_SIZE\n  }), meta);\n}\nexport function createTransaction(data, onComplete) {\n  const meta = {\n    onSuccess: onComplete,\n    notification: {\n      success: '거래가 성공적으로 완료되었습니다'\n    }\n  };\n  return create(data, {}, meta);\n}","map":{"version":3,"sources":["/Volumes/Workstation/dev_wooseok/react/do-it-example/src/08/actions/transactionPackActions.js"],"names":["createActions","CREATE_TRANSACTION","FETCH_TRANSACTION_LIST","collection","create","reset","PAGE_SIZE","resetTransactionList","requestTransactionList","params","_page","meta","pageNumber","pageSize","notification","success","error","_limit","createTransaction","data","onComplete","onSuccess"],"mappings":";;;;;;AAAA,OAAOA,aAAP,MAA0B,uCAA1B;AACA,OAAO,MAAMC,kBAAkB,GAAG,gCAA3B;AAEP,OAAO,MAAMC,sBAAsB,GAAG,oCAA/B;AACP,MAAM;AAAEC,EAAAA,UAAF;AAAcC,EAAAA,MAAd;AAAsBC,EAAAA;AAAtB,IAAgCL,aAAa,CAAC,cAAD,CAAnD;AACA,MAAMM,SAAS,GAAG,EAAlB;AAEA,OAAO,MAAMC,oBAAoB,GAAGF,KAA7B;AACP,OAAO,SAASG,sBAAT,CAAgCC,MAAhC,EAAwCC,KAAK,GAAG,CAAhD,EAAmD;AACxD,QAAMC,IAAI,GAAG;AACXC,IAAAA,UAAU,EAAEF,KADD;AAEXG,IAAAA,QAAQ,EAAEP,SAFC;AAGXQ,IAAAA,YAAY,EAAE;AACZC,MAAAA,OAAO,EAAE,yBADG;AAEZC,MAAAA,KAAK,EAAE;AAFK;AAHH,GAAb;AAQA,SAAOb,UAAU,mBAEVM,MAFU;AAGbC,IAAAA,KAHa;AAIbO,IAAAA,MAAM,EAAEX;AAJK,MAMfK,IANe,CAAjB;AAQD;AAED,OAAO,SAASO,iBAAT,CAA2BC,IAA3B,EAAiCC,UAAjC,EAA6C;AAClD,QAAMT,IAAI,GAAG;AACXU,IAAAA,SAAS,EAAED,UADA;AAEXN,IAAAA,YAAY,EAAE;AACZC,MAAAA,OAAO,EAAE;AADG;AAFH,GAAb;AAMA,SAAOX,MAAM,CAACe,IAAD,EAAO,EAAP,EAAWR,IAAX,CAAb;AACD","sourcesContent":["import createActions from '../../11/api-redux-pack/createActions';\nexport const CREATE_TRANSACTION = 'transaction/CREATE_TRANSACTION';\n\nexport const FETCH_TRANSACTION_LIST = 'transaction/FETCH_TRANSACTION_LIST';\nconst { collection, create, reset } = createActions('transactions');\nconst PAGE_SIZE = 10;\n\nexport const resetTransactionList = reset;\nexport function requestTransactionList(params, _page = 1) {\n  const meta = {\n    pageNumber: _page,\n    pageSize: PAGE_SIZE,\n    notification: {\n      success: '거래 목록을 최신 정보로 업데이트했습니다.',\n      error: '거래 목록을 갱신하는 중에 문제가 발생했습니다.',\n    },\n  };\n  return collection(\n    {\n      ...params,\n      _page,\n      _limit: PAGE_SIZE,\n    },\n    meta,\n  );\n}\n\nexport function createTransaction(data, onComplete) {\n  const meta = {\n    onSuccess: onComplete,\n    notification: {\n      success: '거래가 성공적으로 완료되었습니다',\n    },\n  };\n  return create(data, {}, meta);\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { PureComponent } from 'react';\nimport { Provider } from './context';\nimport Modal from '../Modal';\nexport default function createModalProvider(ContentMap = {}) {\n  return class ModalProvider extends PureComponent {\n    constructor(...args) {\n      super(...args);\n\n      _defineProperty(this, \"state\", {\n        showModal: false\n      });\n\n      _defineProperty(this, \"handleOpen\", (contentId, modalProps) => {\n        this.contentId = contentId;\n        this.modalProps = modalProps;\n        this.setState({\n          showModal: true\n        });\n      });\n\n      _defineProperty(this, \"handleClose\", () => {\n        this.setState({\n          showModal: false\n        });\n      });\n    }\n\n    render() {\n      const {\n        children\n      } = this.props;\n      const {\n        showModal\n      } = this.state;\n      const ModalContent = ContentMap[this.contentId];\n      return __jsx(Provider, {\n        value: {\n          openModal: this.handleOpen,\n          closeModal: this.handleClose\n        }\n      }, children, showModal && ModalContent && __jsx(Modal, null, __jsx(ModalContent, this.modalProps)));\n    }\n\n  };\n}","map":null,"metadata":{},"sourceType":"module"}
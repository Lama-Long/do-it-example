{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nexport default function (loadingMessage = '로딩 중') {\n  return function withLoading(WrappedComponent) {\n    const {\n      displayName,\n      name: componentName\n    } = WrappedComponent;\n    const wrappedComponentName = displayName || componentName;\n\n    function WithLoading(_ref) {\n      let {\n        isLoading\n      } = _ref,\n          otherProps = _objectWithoutProperties(_ref, [\"isLoading\"]);\n\n      if (isLoading) return loadingMessage;\n      return __jsx(WrappedComponent, otherProps);\n    }\n\n    WithLoading.displayName = `withLoading(${wrappedComponentName})`;\n    return WithLoading;\n  };\n}","map":null,"metadata":{},"sourceType":"module"}
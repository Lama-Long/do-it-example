{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { PureComponent } from 'react';\nimport Option from './Option';\nimport { css, withStyles, withStylesPropTypes } from './withStyles';\nexport { Option };\n\nclass Select extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      focused: false\n    });\n\n    _defineProperty(this, \"handleFocus\", () => {\n      this.setState({\n        focused: true\n      });\n    });\n\n    _defineProperty(this, \"handleBlur\", () => {\n      this.setState({\n        focused: false\n      });\n    });\n\n    _defineProperty(this, \"handleChange\", e => {\n      const {\n        name,\n        onChange\n      } = this.props;\n\n      if (onChange) {\n        onChange(name, e.target.value);\n      }\n    });\n\n    _defineProperty(this, \"setRef\", ref => {\n      this.ref = ref;\n    });\n  }\n\n  componentDidMount() {\n    if (this.props.autoFocus) {\n      this.ref.focus();\n    }\n  }\n\n  render() {\n    const {\n      children,\n      disabled,\n      errorMessage,\n      label,\n      value,\n      name,\n      styles,\n      large,\n      xlarge,\n      small,\n      xsmall\n    } = this.props;\n    const {\n      focused\n    } = this.state;\n    return __jsx(\"fieldset\", css(styles.wrapper), __jsx(\"label\", _extends({\n      htmlFor: `input_${name}`\n    }, css(styles.label, errorMessage && styles.errorLabel)), errorMessage || label), __jsx(\"div\", css(styles.placeholder, xsmall && styles.xsmallPadding, small && styles.smallPadding, large && styles.largePadding, xlarge && styles.xlargePadding, focused && styles.focus, errorMessage && styles.error), __jsx(\"select\", _extends({}, css(styles.select, xsmall && styles.xsmall, small && styles.small, large && styles.large, xlarge && styles.xlarge), {\n      disabled: disabled,\n      id: `input_${name}`,\n      ref: this.setRef,\n      onChange: this.handleChange,\n      onFocus: this.handleFocus,\n      onBlur: this.handleBlur,\n      value: value\n    }), React.Children.map(children, child => React.cloneElement(child, {\n      disabled\n    })))));\n  }\n\n}\n\nSelect.defaultProps = {\n  onChange: () => {},\n  autoFocus: false\n};\nexport default withStyles(({\n  unit,\n  color,\n  size,\n  lineHeight\n}) => ({\n  wrapper: {\n    border: 0,\n    padding: 0,\n    position: 'relative'\n  },\n  label: {\n    display: 'block',\n    fontSize: size.xs,\n    top: 2,\n    left: unit * 2,\n    cursor: 'pointer'\n  },\n  placeholder: {\n    marginTop: 2,\n    border: 1,\n    borderColor: color.primary,\n    borderStyle: 'solid',\n    borderRadius: 4,\n    padding: unit * 1.5\n  },\n  focus: {\n    boxShadow: '0 0 0px 2px rgba(0, 0, 0, 0.3)'\n  },\n  xlargePadding: {\n    padding: unit * 2\n  },\n  largePadding: {\n    padding: unit * 2\n  },\n  smallPadding: {\n    padding: unit - 1\n  },\n  xsmallPadding: {\n    padding: unit - 2\n  },\n  select: {\n    fontSize: size.md,\n    lineHeight: lineHeight.md,\n    backgroundColor: color.white,\n    border: 0,\n    outline: 0,\n    width: '100%'\n  },\n  xlarge: {\n    fontSize: size.xg\n  },\n  large: {\n    fontSize: size.lg\n  },\n  small: {\n    fontSize: size.sm\n  },\n  errorLabel: {\n    color: color.error\n  },\n  error: {\n    borderColor: color.error\n  }\n}))(Select);","map":null,"metadata":{},"sourceType":"module"}
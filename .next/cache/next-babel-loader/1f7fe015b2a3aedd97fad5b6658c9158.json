{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { PureComponent } from 'react';\nconst {\n  Consumer,\n  Provider\n} = React.createContext({});\n\nclass FormProvider extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {});\n\n    _defineProperty(this, \"handleSubmit\", e => {\n      const {\n        values,\n        errors\n      } = this.state;\n      e.preventDefault();\n\n      if (Object.values(errors).length === 0) {\n        this.props.onSubmit(values);\n      }\n    });\n\n    _defineProperty(this, \"onChange\", (name, updatedValue) => {\n      this.setState(({\n        values\n      }) => ({\n        values: _objectSpread({}, values, {\n          [name]: updatedValue\n        })\n      }), () => this.validate(this.state.values));\n    });\n\n    _defineProperty(this, \"reset\", () => {\n      this.setState({\n        values: {}\n      });\n    });\n\n    _defineProperty(this, \"validate\", values => {\n      const {\n        validate\n      } = this.props;\n\n      if (!validate) {\n        return;\n      }\n\n      const errors = this.props.validate(values);\n      this.setState({\n        errors\n      });\n    });\n  }\n\n  static getDerivedStateFromProps({\n    initValues\n  }, prevState) {\n    const values = initValues !== prevState.initValues ? initValues : prevState.values;\n    return {\n      initValues,\n      values,\n      errors: {}\n    };\n  }\n\n  render() {\n    const {\n      values,\n      errors\n    } = this.state;\n    return __jsx(Provider, {\n      value: {\n        errors,\n        values,\n        onChange: this.onChange,\n        reset: this.reset\n      }\n    }, __jsx(\"form\", {\n      onSubmit: this.handleSubmit\n    }, this.props.children));\n  }\n\n}\n\n_defineProperty(FormProvider, \"Consumer\", Consumer);\n\nFormProvider.defaultProps = {\n  initValues: {},\n  validate: () => ({})\n};\nexport default FormProvider;","map":null,"metadata":{},"sourceType":"module"}
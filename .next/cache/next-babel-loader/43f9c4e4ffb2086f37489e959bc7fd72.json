{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { CREATE, FETCH, FETCH_LIST, RESET, UPDATE } from './actionTypes';\nimport Api from '../../08/Api';\nexport default (function (resourceName) {\n  var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'id';\n  return {\n    collection: function collection() {\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var meta = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return {\n        type: FETCH_LIST,\n        promise: Api.get(resourceName, {\n          params: params\n        }),\n        meta: _objectSpread({}, meta, {\n          key: key,\n          resourceName: resourceName\n        })\n      };\n    },\n    member: function member(id) {\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var meta = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return {\n        type: FETCH,\n        promise: Api.get(\"\".concat(resourceName, \"/\").concat(id), {\n          params: params\n        }),\n        meta: _objectSpread({}, meta, {\n          key: key,\n          resourceName: resourceName\n        })\n      };\n    },\n    create: function create(data) {\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var meta = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return {\n        type: CREATE,\n        promise: Api.post(resourceName, data, {\n          params: params\n        }),\n        meta: _objectSpread({}, meta, {\n          key: key,\n          resourceName: resourceName\n        })\n      };\n    },\n    update: function update(id, data) {\n      var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var meta = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      return {\n        type: UPDATE,\n        promise: Api.put(\"\".concat(resourceName, \"/\").concat(id), data, {\n          params: params\n        }),\n        meta: _objectSpread({}, meta, {\n          key: key,\n          resourceName: resourceName\n        })\n      };\n    },\n    reset: function reset() {\n      return {\n        type: RESET,\n        meta: {\n          resourceName: resourceName\n        }\n      };\n    }\n  };\n});","map":{"version":3,"sources":["/Volumes/Workstation/dev_wooseok/react/do-it-example/src/11/api-redux-pack/createActions.js"],"names":["CREATE","FETCH","FETCH_LIST","RESET","UPDATE","Api","resourceName","key","collection","params","meta","type","promise","get","member","id","create","data","post","update","put","reset"],"mappings":";;;;;;AAAA,SAASA,MAAT,EAAiBC,KAAjB,EAAwBC,UAAxB,EAAoCC,KAApC,EAA2CC,MAA3C,QAAyD,eAAzD;AACA,OAAOC,GAAP,MAAgB,cAAhB;AAEA,gBAAe,UAACC,YAAD;AAAA,MAAeC,GAAf,uEAAqB,IAArB;AAAA,SAA+B;AAC5CC,IAAAA,UAAU,EAAE;AAAA,UAACC,MAAD,uEAAU,EAAV;AAAA,UAAcC,IAAd,uEAAqB,EAArB;AAAA,aAA6B;AACvCC,QAAAA,IAAI,EAAET,UADiC;AAEvCU,QAAAA,OAAO,EAAEP,GAAG,CAACQ,GAAJ,CAAQP,YAAR,EAAsB;AAAEG,UAAAA,MAAM,EAANA;AAAF,SAAtB,CAF8B;AAGvCC,QAAAA,IAAI,oBACCA,IADD;AAEFH,UAAAA,GAAG,EAAHA,GAFE;AAGFD,UAAAA,YAAY,EAAZA;AAHE;AAHmC,OAA7B;AAAA,KADgC;AAU5CQ,IAAAA,MAAM,EAAE,gBAACC,EAAD;AAAA,UAAKN,MAAL,uEAAc,EAAd;AAAA,UAAkBC,IAAlB,uEAAyB,EAAzB;AAAA,aAAiC;AACvCC,QAAAA,IAAI,EAAEV,KADiC;AAEvCW,QAAAA,OAAO,EAAEP,GAAG,CAACQ,GAAJ,WAAWP,YAAX,cAA2BS,EAA3B,GAAiC;AAAEN,UAAAA,MAAM,EAANA;AAAF,SAAjC,CAF8B;AAGvCC,QAAAA,IAAI,oBACCA,IADD;AAEFH,UAAAA,GAAG,EAAHA,GAFE;AAGFD,UAAAA,YAAY,EAAZA;AAHE;AAHmC,OAAjC;AAAA,KAVoC;AAmB5CU,IAAAA,MAAM,EAAE,gBAACC,IAAD;AAAA,UAAOR,MAAP,uEAAgB,EAAhB;AAAA,UAAoBC,IAApB,uEAA2B,EAA3B;AAAA,aAAmC;AACzCC,QAAAA,IAAI,EAAEX,MADmC;AAEzCY,QAAAA,OAAO,EAAEP,GAAG,CAACa,IAAJ,CAASZ,YAAT,EAAuBW,IAAvB,EAA6B;AAAER,UAAAA,MAAM,EAANA;AAAF,SAA7B,CAFgC;AAGzCC,QAAAA,IAAI,oBACCA,IADD;AAEFH,UAAAA,GAAG,EAAHA,GAFE;AAGFD,UAAAA,YAAY,EAAZA;AAHE;AAHqC,OAAnC;AAAA,KAnBoC;AA4B5Ca,IAAAA,MAAM,EAAE,gBAACJ,EAAD,EAAKE,IAAL;AAAA,UAAWR,MAAX,uEAAoB,EAApB;AAAA,UAAwBC,IAAxB,uEAA+B,EAA/B;AAAA,aAAuC;AAC7CC,QAAAA,IAAI,EAAEP,MADuC;AAE7CQ,QAAAA,OAAO,EAAEP,GAAG,CAACe,GAAJ,WAAWd,YAAX,cAA2BS,EAA3B,GAAiCE,IAAjC,EAAuC;AAAER,UAAAA,MAAM,EAANA;AAAF,SAAvC,CAFoC;AAG7CC,QAAAA,IAAI,oBACCA,IADD;AAEFH,UAAAA,GAAG,EAAHA,GAFE;AAGFD,UAAAA,YAAY,EAAZA;AAHE;AAHyC,OAAvC;AAAA,KA5BoC;AAqC5Ce,IAAAA,KAAK,EAAE;AAAA,aAAO;AACZV,QAAAA,IAAI,EAAER,KADM;AAEZO,QAAAA,IAAI,EAAE;AAAEJ,UAAAA,YAAY,EAAZA;AAAF;AAFM,OAAP;AAAA;AArCqC,GAA/B;AAAA,CAAf","sourcesContent":["import { CREATE, FETCH, FETCH_LIST, RESET, UPDATE } from './actionTypes';\nimport Api from '../../08/Api';\n\nexport default (resourceName, key = 'id') => ({\n  collection: (params = {}, meta = {}) => ({\n    type: FETCH_LIST,\n    promise: Api.get(resourceName, { params }),\n    meta: {\n      ...meta,\n      key,\n      resourceName,\n    },\n  }),\n  member: (id, params = {}, meta = {}) => ({\n    type: FETCH,\n    promise: Api.get(`${resourceName}/${id}`, { params }),\n    meta: {\n      ...meta,\n      key,\n      resourceName,\n    },\n  }),\n  create: (data, params = {}, meta = {}) => ({\n    type: CREATE,\n    promise: Api.post(resourceName, data, { params }),\n    meta: {\n      ...meta,\n      key,\n      resourceName,\n    },\n  }),\n  update: (id, data, params = {}, meta = {}) => ({\n    type: UPDATE,\n    promise: Api.put(`${resourceName}/${id}`, data, { params }),\n    meta: {\n      ...meta,\n      key,\n      resourceName,\n    },\n  }),\n  reset: () => ({\n    type: RESET,\n    meta: { resourceName },\n  }),\n});\n"]},"metadata":{},"sourceType":"module"}
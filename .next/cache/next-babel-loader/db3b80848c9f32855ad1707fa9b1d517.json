{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { CREATE, FETCH, FETCH_LIST, RESET, UPDATE } from './actionTypes';\nimport { handle } from 'redux-pack';\nexport default ((...reducerNames) => {\n  return reducerNames.reduce((apiReducers, name) => {\n    const initState = {\n      ids: [],\n      entities: {},\n      loadingState: {\n        [`${CREATE}/${name}`]: false,\n        [`${UPDATE}/${name}`]: false,\n        [`${FETCH}/${name}`]: false,\n        [`${FETCH_LIST}/${name}`]: false\n      },\n      errorState: {\n        [`${CREATE}/${name}`]: false,\n        [`${UPDATE}/${name}`]: false,\n        [`${FETCH}/${name}`]: false,\n        [`${FETCH_LIST}/${name}`]: false\n      },\n      pagination: {}\n    };\n\n    apiReducers[name] = (state = initState, action) => {\n      const {\n        type,\n        payload,\n        meta\n      } = action;\n      const {\n        resourceName,\n        key\n      } = meta || {};\n\n      if (resourceName !== name) {\n        return state;\n      }\n\n      switch (type) {\n        case UPDATE:\n        case FETCH:\n        case CREATE:\n        case FETCH_LIST:\n          return handle(state, action, {\n            start: prevState => _objectSpread({}, prevState, {\n              loadingState: _objectSpread({}, prevState.loadingState, {\n                [`${type}/${name}`]: true\n              }),\n              errorState: _objectSpread({}, prevState.errorState, {\n                [`${type}/${name}`]: true\n              })\n            }),\n            success: prevState => {\n              const {\n                data\n              } = payload;\n\n              if (type === FETCH_LIST) {\n                const {\n                  pageNumber,\n                  pageSize\n                } = meta || {};\n                const ids = data.map(entity => entity[key]);\n                const entities = data.reduce((finalEntities, entity) => _objectSpread({}, finalEntities, {\n                  [entity[key]]: entity\n                }), {});\n                return _objectSpread({}, prevState, {\n                  ids,\n                  entities: _objectSpread({}, prevState.entities, {}, entities),\n                  loadingState: _objectSpread({}, prevState.loadingState, {\n                    [`${type}/${name}`]: false\n                  }),\n                  errorState: _objectSpread({}, prevState.errorState, {\n                    [`${type}/${name}`]: false\n                  }),\n                  pagination: {\n                    number: pageNumber,\n                    size: pageSize\n                  }\n                });\n              } else {\n                const id = data[key];\n                return _objectSpread({}, prevState, {\n                  id,\n                  entities: _objectSpread({}, prevState.entities, {\n                    [id]: data\n                  }),\n                  loadingState: _objectSpread({}, prevState.loadingState, {\n                    [`${type}/${name}`]: false\n                  }),\n                  errorState: _objectSpread({}, prevState.errorState, {\n                    [`${type}/${name}`]: false\n                  })\n                });\n              }\n            },\n            failure: prevState => {\n              const {\n                errorMessage\n              } = payload.response ? payload.response.data : {};\n              return _objectSpread({}, prevState, {\n                loadingState: _objectSpread({}, prevState.loadingState, {\n                  [`${type}/${name}`]: false\n                }),\n                errorState: _objectSpread({}, prevState.errorState, {\n                  [`${type}/${name}`]: errorMessage || true\n                })\n              });\n            }\n          });\n\n        case RESET:\n          return initState;\n\n        default:\n          return state;\n      }\n    };\n\n    return apiReducers;\n  }, {});\n});","map":{"version":3,"sources":["/Volumes/Workstation/dev_wooseok/react/do-it-example/src/11/api-redux-pack/createReducers.js"],"names":["CREATE","FETCH","FETCH_LIST","RESET","UPDATE","handle","reducerNames","reduce","apiReducers","name","initState","ids","entities","loadingState","errorState","pagination","state","action","type","payload","meta","resourceName","key","start","prevState","success","data","pageNumber","pageSize","map","entity","finalEntities","number","size","id","failure","errorMessage","response"],"mappings":"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","sourcesContent":["import { CREATE, FETCH, FETCH_LIST, RESET, UPDATE } from './actionTypes';\nimport { handle } from 'redux-pack';\n\nexport default (...reducerNames) => {\n  return reducerNames.reduce((apiReducers, name) => {\n    const initState = {\n      ids: [],\n      entities: {},\n      loadingState: {\n        [`${CREATE}/${name}`]: false,\n        [`${UPDATE}/${name}`]: false,\n        [`${FETCH}/${name}`]: false,\n        [`${FETCH_LIST}/${name}`]: false,\n      },\n      errorState: {\n        [`${CREATE}/${name}`]: false,\n        [`${UPDATE}/${name}`]: false,\n        [`${FETCH}/${name}`]: false,\n        [`${FETCH_LIST}/${name}`]: false,\n      },\n      pagination: {},\n    };\n    apiReducers[name] = (state = initState, action) => {\n      const { type, payload, meta } = action;\n      const { resourceName, key } = meta || {};\n      if (resourceName !== name) {\n        return state;\n      }\n      switch (type) {\n        case UPDATE:\n        case FETCH:\n        case CREATE:\n        case FETCH_LIST:\n          return handle(state, action, {\n            start: (prevState) => ({\n              ...prevState,\n              loadingState: {\n                ...prevState.loadingState,\n                [`${type}/${name}`]: true,\n              },\n              errorState: {\n                ...prevState.errorState,\n                [`${type}/${name}`]: true,\n              },\n            }),\n            success: (prevState) => {\n              const { data } = payload;\n              if (type === FETCH_LIST) {\n                const { pageNumber, pageSize } = meta || {};\n                const ids = data.map((entity) => entity[key]);\n                const entities = data.reduce(\n                  (finalEntities, entity) => ({\n                    ...finalEntities,\n                    [entity[key]]: entity,\n                  }),\n                  {},\n                );\n                return {\n                  ...prevState,\n                  ids,\n                  entities: { ...prevState.entities, ...entities },\n                  loadingState: {\n                    ...prevState.loadingState,\n                    [`${type}/${name}`]: false,\n                  },\n                  errorState: {\n                    ...prevState.errorState,\n                    [`${type}/${name}`]: false,\n                  },\n                  pagination: {\n                    number: pageNumber,\n                    size: pageSize,\n                  },\n                };\n              } else {\n                const id = data[key];\n                return {\n                  ...prevState,\n                  id,\n                  entities: { ...prevState.entities, [id]: data },\n                  loadingState: {\n                    ...prevState.loadingState,\n                    [`${type}/${name}`]: false,\n                  },\n                  errorState: {\n                    ...prevState.errorState,\n                    [`${type}/${name}`]: false,\n                  },\n                };\n              }\n            },\n            failure: (prevState) => {\n              const { errorMessage } = payload.response ? payload.response.data : {};\n              return {\n                ...prevState,\n                loadingState: {\n                  ...prevState.loadingState,\n                  [`${type}/${name}`]: false,\n                },\n                errorState: {\n                  ...prevState.errorState,\n                  [`${type}/${name}`]: errorMessage || true,\n                },\n              };\n            },\n          });\n        case RESET:\n          return initState;\n        default:\n          return state;\n      }\n    };\n    return apiReducers;\n  }, {});\n};\n"]},"metadata":{},"sourceType":"module"}
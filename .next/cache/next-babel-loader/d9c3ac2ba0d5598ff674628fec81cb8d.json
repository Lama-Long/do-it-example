{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { CREATE, FETCH, FETCH_LIST, RESET, UPDATE } from './actionTypes';\nimport Api from '../../08/Api';\nexport default ((resourceName, key = 'id') => ({\n  collection: (params = {}, meta = {}) => ({\n    type: FETCH_LIST,\n    promise: Api.get(resourceName, {\n      params\n    }),\n    meta: _objectSpread({}, meta, {\n      key,\n      resourceName\n    })\n  }),\n  member: (id, params = {}, meta = {}) => ({\n    type: FETCH,\n    promise: Api.get(`${resourceName}/${id}`, {\n      params\n    }),\n    meta: _objectSpread({}, meta, {\n      key,\n      resourceName\n    })\n  }),\n  create: (data, params = {}, meta = {}) => ({\n    type: CREATE,\n    promise: Api.post(resourceName, data, {\n      params\n    }),\n    meta: _objectSpread({}, meta, {\n      key,\n      resourceName\n    })\n  }),\n  update: (id, data, params = {}, meta = {}) => ({\n    type: UPDATE,\n    promise: Api.put(`${resourceName}/${id}`, data, {\n      params\n    }),\n    meta: _objectSpread({}, meta, {\n      key,\n      resourceName\n    })\n  }),\n  reset: () => ({\n    type: RESET,\n    meta: {\n      resourceName\n    }\n  })\n}));","map":{"version":3,"sources":["/Volumes/Workstation/dev_wooseok/react/do-it-example/src/11/api-redux-pack/createActions.js"],"names":["CREATE","FETCH","FETCH_LIST","RESET","UPDATE","Api","resourceName","key","collection","params","meta","type","promise","get","member","id","create","data","post","update","put","reset"],"mappings":";;;;;;AAAA,SAASA,MAAT,EAAiBC,KAAjB,EAAwBC,UAAxB,EAAoCC,KAApC,EAA2CC,MAA3C,QAAyD,eAAzD;AACA,OAAOC,GAAP,MAAgB,cAAhB;AAEA,gBAAe,CAACC,YAAD,EAAeC,GAAG,GAAG,IAArB,MAA+B;AAC5CC,EAAAA,UAAU,EAAE,CAACC,MAAM,GAAG,EAAV,EAAcC,IAAI,GAAG,EAArB,MAA6B;AACvCC,IAAAA,IAAI,EAAET,UADiC;AAEvCU,IAAAA,OAAO,EAAEP,GAAG,CAACQ,GAAJ,CAAQP,YAAR,EAAsB;AAAEG,MAAAA;AAAF,KAAtB,CAF8B;AAGvCC,IAAAA,IAAI,oBACCA,IADD;AAEFH,MAAAA,GAFE;AAGFD,MAAAA;AAHE;AAHmC,GAA7B,CADgC;AAU5CQ,EAAAA,MAAM,EAAE,CAACC,EAAD,EAAKN,MAAM,GAAG,EAAd,EAAkBC,IAAI,GAAG,EAAzB,MAAiC;AACvCC,IAAAA,IAAI,EAAEV,KADiC;AAEvCW,IAAAA,OAAO,EAAEP,GAAG,CAACQ,GAAJ,CAAS,GAAEP,YAAa,IAAGS,EAAG,EAA9B,EAAiC;AAAEN,MAAAA;AAAF,KAAjC,CAF8B;AAGvCC,IAAAA,IAAI,oBACCA,IADD;AAEFH,MAAAA,GAFE;AAGFD,MAAAA;AAHE;AAHmC,GAAjC,CAVoC;AAmB5CU,EAAAA,MAAM,EAAE,CAACC,IAAD,EAAOR,MAAM,GAAG,EAAhB,EAAoBC,IAAI,GAAG,EAA3B,MAAmC;AACzCC,IAAAA,IAAI,EAAEX,MADmC;AAEzCY,IAAAA,OAAO,EAAEP,GAAG,CAACa,IAAJ,CAASZ,YAAT,EAAuBW,IAAvB,EAA6B;AAAER,MAAAA;AAAF,KAA7B,CAFgC;AAGzCC,IAAAA,IAAI,oBACCA,IADD;AAEFH,MAAAA,GAFE;AAGFD,MAAAA;AAHE;AAHqC,GAAnC,CAnBoC;AA4B5Ca,EAAAA,MAAM,EAAE,CAACJ,EAAD,EAAKE,IAAL,EAAWR,MAAM,GAAG,EAApB,EAAwBC,IAAI,GAAG,EAA/B,MAAuC;AAC7CC,IAAAA,IAAI,EAAEP,MADuC;AAE7CQ,IAAAA,OAAO,EAAEP,GAAG,CAACe,GAAJ,CAAS,GAAEd,YAAa,IAAGS,EAAG,EAA9B,EAAiCE,IAAjC,EAAuC;AAAER,MAAAA;AAAF,KAAvC,CAFoC;AAG7CC,IAAAA,IAAI,oBACCA,IADD;AAEFH,MAAAA,GAFE;AAGFD,MAAAA;AAHE;AAHyC,GAAvC,CA5BoC;AAqC5Ce,EAAAA,KAAK,EAAE,OAAO;AACZV,IAAAA,IAAI,EAAER,KADM;AAEZO,IAAAA,IAAI,EAAE;AAAEJ,MAAAA;AAAF;AAFM,GAAP;AArCqC,CAA/B,CAAf","sourcesContent":["import { CREATE, FETCH, FETCH_LIST, RESET, UPDATE } from './actionTypes';\nimport Api from '../../08/Api';\n\nexport default (resourceName, key = 'id') => ({\n  collection: (params = {}, meta = {}) => ({\n    type: FETCH_LIST,\n    promise: Api.get(resourceName, { params }),\n    meta: {\n      ...meta,\n      key,\n      resourceName,\n    },\n  }),\n  member: (id, params = {}, meta = {}) => ({\n    type: FETCH,\n    promise: Api.get(`${resourceName}/${id}`, { params }),\n    meta: {\n      ...meta,\n      key,\n      resourceName,\n    },\n  }),\n  create: (data, params = {}, meta = {}) => ({\n    type: CREATE,\n    promise: Api.post(resourceName, data, { params }),\n    meta: {\n      ...meta,\n      key,\n      resourceName,\n    },\n  }),\n  update: (id, data, params = {}, meta = {}) => ({\n    type: UPDATE,\n    promise: Api.put(`${resourceName}/${id}`, data, { params }),\n    meta: {\n      ...meta,\n      key,\n      resourceName,\n    },\n  }),\n  reset: () => ({\n    type: RESET,\n    meta: { resourceName },\n  }),\n});\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { CREATE, FETCH, FETCH_LIST, RESET, UPDATE } from './actionTypes';\nimport Api from '../../08/Api';\nexport default (function (resourceName) {\n  var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'id';\n  return {\n    collection: function collection() {\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var meta = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return {\n        type: FETCH_LIST,\n        promise: Api.get(resourceName, {\n          params: params\n        }),\n        meta: _objectSpread({}, meta, {\n          key: key,\n          resourceName: resourceName\n        })\n      };\n    },\n    member: function member(id) {\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var meta = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return {\n        type: FETCH,\n        promise: Api.get(\"\".concat(resourceName, \"/\").concat(id), {\n          params: params\n        }),\n        meta: _objectSpread({}, meta, {\n          key: key,\n          resourceName: resourceName\n        })\n      };\n    },\n    create: function create(data) {\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var meta = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return {\n        type: CREATE,\n        promise: Api.post(resourceName, data, {\n          params: params\n        }),\n        meta: _objectSpread({}, meta, {\n          key: key,\n          resourceName: resourceName\n        })\n      };\n    },\n    update: function update(id, data) {\n      var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var meta = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      return {\n        type: UPDATE,\n        promise: Api.put(\"\".concat(resourceName, \"/\").concat(id), data, {\n          params: params\n        }),\n        meta: _objectSpread({}, meta, {\n          key: key,\n          resourceName: resourceName\n        })\n      };\n    },\n    reset: function reset() {\n      return {\n        type: RESET,\n        meta: {\n          resourceName: resourceName\n        }\n      };\n    }\n  };\n});","map":null,"metadata":{},"sourceType":"module"}
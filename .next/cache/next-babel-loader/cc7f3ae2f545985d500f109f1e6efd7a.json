{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport App from 'next/app';\nimport configureStore from '../src/08/store/configureStore';\nimport { Provider } from 'react-redux';\nimport ModalProvider from '../src/08/ModalProvider';\nimport AppLayout from '../src/08/components/AppLayout';\nimport NotificationContainer from '../src/08/containers/NotificationContainer';\nimport { StaticRouter } from 'react-router';\nimport { BrowserRouter } from 'react-router-dom';\nimport RouterStateContainer from '../src/08/containers/RouterStateContainer';\nconst isServer = true;\n\nclass MyApp extends App {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"store\", configureStore());\n  }\n\n  render() {\n    const {\n      Component,\n      router,\n      pageProps\n    } = this.props;\n    const Router = isServer ? StaticRouter : BrowserRouter;\n    const routerProps = isServer ? {\n      location: router.asPath\n    } : {};\n    return __jsx(React.Fragment, null, __jsx(Provider, {\n      store: this.store\n    }, __jsx(Router, routerProps, __jsx(RouterStateContainer, null), __jsx(ModalProvider, null, __jsx(AppLayout, null, __jsx(Component, pageProps), __jsx(NotificationContainer, null))), __jsx(NotificationContainer, null))));\n  }\n\n}\n\nexport default MyApp;","map":null,"metadata":{},"sourceType":"module"}
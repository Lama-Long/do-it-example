{"ast":null,"code":"var _jsxFileName = \"/Volumes/Workstation/dev_wooseok/react/do-it-example/src/doit-ui/Modal/create.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { PureComponent } from 'react';\nimport { Provider } from './context';\nimport Modal from '../Modal';\nexport default function createModalProvider(ContentMap = {}) {\n  return class ModalProvider extends PureComponent {\n    constructor(...args) {\n      super(...args);\n\n      _defineProperty(this, \"state\", {\n        showModal: false\n      });\n\n      _defineProperty(this, \"handleOpen\", (contentId, modalProps) => {\n        this.contentId = contentId;\n        this.modalProps = modalProps;\n        this.setState({\n          showModal: true\n        });\n      });\n\n      _defineProperty(this, \"handleClose\", () => {\n        this.setState({\n          showModal: false\n        });\n      });\n    }\n\n    render() {\n      const {\n        children\n      } = this.props;\n      const {\n        showModal\n      } = this.state;\n      const ModalContent = ContentMap[this.contentId];\n      return __jsx(Provider, {\n        value: {\n          openModal: this.handleOpen,\n          closeModal: this.handleClose\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 9\n        }\n      }, children, showModal && ModalContent && __jsx(Modal, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 13\n        }\n      }, __jsx(ModalContent, _extends({}, this.modalProps, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 15\n        }\n      }))));\n    }\n\n  };\n}","map":{"version":3,"sources":["/Volumes/Workstation/dev_wooseok/react/do-it-example/src/doit-ui/Modal/create.js"],"names":["React","PureComponent","Provider","Modal","createModalProvider","ContentMap","ModalProvider","showModal","contentId","modalProps","setState","render","children","props","state","ModalContent","openModal","handleOpen","closeModal","handleClose"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AACA,SAASC,QAAT,QAAyB,WAAzB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AAEA,eAAe,SAASC,mBAAT,CAA6BC,UAAU,GAAG,EAA1C,EAA8C;AAC3D,SAAO,MAAMC,aAAN,SAA4BL,aAA5B,CAA0C;AAAA;AAAA;;AAAA,qCACvC;AACNM,QAAAA,SAAS,EAAE;AADL,OADuC;;AAAA,0CAKlC,CAACC,SAAD,EAAYC,UAAZ,KAA2B;AACtC,aAAKD,SAAL,GAAiBA,SAAjB;AACA,aAAKC,UAAL,GAAkBA,UAAlB;AACA,aAAKC,QAAL,CAAc;AAAEH,UAAAA,SAAS,EAAE;AAAb,SAAd;AACD,OAT8C;;AAAA,2CAWjC,MAAM;AAClB,aAAKG,QAAL,CAAc;AAAEH,UAAAA,SAAS,EAAE;AAAb,SAAd;AACD,OAb8C;AAAA;;AAe/CI,IAAAA,MAAM,GAAG;AACP,YAAM;AAAEC,QAAAA;AAAF,UAAe,KAAKC,KAA1B;AACA,YAAM;AAAEN,QAAAA;AAAF,UAAgB,KAAKO,KAA3B;AAEA,YAAMC,YAAY,GAAGV,UAAU,CAAC,KAAKG,SAAN,CAA/B;AACA,aACE,MAAC,QAAD;AAAU,QAAA,KAAK,EAAE;AAAEQ,UAAAA,SAAS,EAAE,KAAKC,UAAlB;AAA8BC,UAAAA,UAAU,EAAE,KAAKC;AAA/C,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGP,QADH,EAEGL,SAAS,IAAIQ,YAAb,IACC,MAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,MAAC,YAAD,eAAkB,KAAKN,UAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADF,CAHJ,CADF;AAUD;;AA9B8C,GAAjD;AAgCD","sourcesContent":["import React, { PureComponent } from 'react';\nimport { Provider } from './context';\nimport Modal from '../Modal';\n\nexport default function createModalProvider(ContentMap = {}) {\n  return class ModalProvider extends PureComponent {\n    state = {\n      showModal: false,\n    };\n\n    handleOpen = (contentId, modalProps) => {\n      this.contentId = contentId;\n      this.modalProps = modalProps;\n      this.setState({ showModal: true });\n    };\n\n    handleClose = () => {\n      this.setState({ showModal: false });\n    };\n\n    render() {\n      const { children } = this.props;\n      const { showModal } = this.state;\n\n      const ModalContent = ContentMap[this.contentId];\n      return (\n        <Provider value={{ openModal: this.handleOpen, closeModal: this.handleClose }}>\n          {children}\n          {showModal && ModalContent && (\n            <Modal>\n              <ModalContent {...this.modalProps} />\n            </Modal>\n          )}\n        </Provider>\n      );\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}